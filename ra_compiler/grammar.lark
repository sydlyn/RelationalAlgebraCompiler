// ra_compiler/grammar.lark
// defines the grammar for the relational algebra compiler as described in [doc file] <- TODO

start: "(" _expr ")"

_expr: unary_ops
     | set_ops
     | join_ops
     | "(" _expr ")"


// ~~~~~~~~ UNARY OPERATIONS ~~~~~~~~ //

unary_ops: projection
         | selection
         | group
         | rename
         | remove_duplicates
         | sort

projection: PROJ_PREFIX "{" attributes "}" table
selection: _SEL_PREFIX "{" comp_cond "}" table
group: _GROUP_PREFIX "{" attributes ";" aggr_conds "}" table
rename: _RENAME_PREFIX "{" CNAME "}" table
remove_duplicates: _REMOVE_DUPLICATES_PREFIX table
sort: _SORT_PREFIX "{" sort_attributes"}" table  

PROJ_PREFIX: "/projection"i
           | "/projection^d"i
           | "/pi"i
           | "/pi^d"i

_SEL_PREFIX: "/selection"i
           | "/sigma"i
           | "/select"i

_GROUP_PREFIX: "/group_by"i
             | "/group"i
             | "/gamma"i

_RENAME_PREFIX: "/rename"i
             | "/rho"i

_REMOVE_DUPLICATES_PREFIX: "/remove_duplicates"i
                        | "/remove_dups"i
                        | "/delta"i

_SORT_PREFIX: "/sort"i
           | "/order"i
           | "/tau"i


// ~~~~~~~~ SET OPERATIONS ~~~~~~~~ //

set_ops: union
       | intersection
       | difference

union: table UNION_PREFIX table // ("," table)*
intersection: table INTERSECT_PREFIX table // ("," table)*
difference: table DIFFERENCE_PREFIX table // ("," table)*

UNION_PREFIX: "/union"i
            | "/u"i
            | "/union^d"i
            | "/u^d"i

INTERSECT_PREFIX: "/intersect"i
                   | "/inter"i
                   | "/intersect^d"i
                   | "/inter^d"i

DIFFERENCE_PREFIX: "/difference"i
                 | "/diff"i
                 | "/difference^d"i
                 | "/diff^d"i


// ~~~~~~~~ JOIN OPERATIONS ~~~~~~~~ //

join_ops: cross
        | join
        | divide

cross: table _CROSS_PREFIX table
join: table JOIN_PREFIX ("{" (attributes | comp_cond) "}")? table
divide: table _DIVIDE_PREFIX table

_CROSS_PREFIX: "/cross_product"i
            | "/cross"i
            | "/x"i

JOIN_PREFIX: /\/(inner_)?j(oin)?/i
            | /\/left(_outer)?(_j(oin)?)?/i
            | /\/right(_outer)?(_j(oin)?)?/i
            | /\/full(_outer)?(_j(oin)?)?|outer(_j(oin)?)?/i
            | /\/(left_)?semi(_j(oin)?)?/i
            | /\/right_semi(_j(oin)?)?/i

_DIVIDE_PREFIX: "/divide"i
              | "/div"i

// ~~~~~~~~ TABLES, ATTRIBUTES, & OTHER ~~~~~~~~ //

table: CNAME | "(" _expr ")"

attributes: attr ("," attr)*
sort_attributes: attr SORT_DIR ("," attr SORT_DIR)*

?attr: CNAME ("." CNAME)?
     | math_cond "->" CNAME     // TODO: fix to be communitive
     | CNAME "->" CNAME

math_cond: attr MATH_OP (attr | NUMBER)  // TODO: fix to be communitive
        | "(" math_cond ")"
        
// TODO: fix to not allow NUMBER COMP_OP NUMBER but still be communitive
comp_cond: _comp_cond_attr COMP_OP _comp_cond_attr 
          | "(" comp_cond ")"
          | comp_cond (AND | OR) comp_cond

_comp_cond_attr: (attr | NUMBER | ESCAPED_STRING | math_cond) 

aggr_conds: aggr_func ("," aggr_func)*
aggr_func: AGGR_OP "(" attr ")"

MATH_OP: "+" | "-" | "*" | "/" | "%" | "^"
COMP_OP: ">" | "<" | ">=" | "<=" | "!=" | "==" | "="
AGGR_OP: "sum"i | "count"i | "avg"i | "min"i | "max"i
AND: "and"i | "&&" | "&" 
OR: "or"i | "||" | "|"
SORT_DIR: "asc"i | "desc"i

%import common.ESCAPED_STRING
%import common.CNAME
%import common.NUMBER
%import common.WS
%ignore WS
