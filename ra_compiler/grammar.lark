// ra_compiler/grammar.lark
// defines the grammar for the relational algebra compiler as described in grammar_syntax.md

start: db_ops | _expr | _expr "->" CNAME

_expr: table
    | unary_ops
    | set_ops
    | merge_ops

table: CNAME | "(" _expr ")"

// ~~~~~~~~ DATABASE OPERATIONS ~~~~~~~~ //

db_ops: list
      | drop

list: "list"i | "/list"i | "(" list ")"

drop: "/drop"i CNAME | "(" drop")"

// ~~~~~~~~ UNARY OPERATIONS ~~~~~~~~ //

unary_ops: projection
         | selection
         | group
         | rename
         | remove_duplicates
         | sort

projection: PROJ_PREFIX "{" attributes "}" table
selection: _SEL_PREFIX "{" comp_cond "}" table
group: _GROUP_PREFIX "{" attributes ";" aggr_conds "}" table
remove_duplicates: _REMOVE_DUPLICATES_PREFIX table
sort: _SORT_PREFIX "{" sort_attributes "}" table  
rename: _RENAME_PREFIX "{" CNAME "}" _expr
        | _RENAME_PREFIX "(" CNAME "," _expr ")"

PROJ_PREFIX: "/projection"i
           | "/projection^d"i
           | "/pi"i
           | "/pi^d"i

_SEL_PREFIX: "/selection"i
           | "/select"i
           | "/sigma"i

_GROUP_PREFIX: "/group_by"i
             | "/group"i
             | "/gamma"i

_RENAME_PREFIX: "/rename"i
             | "/rho"i

_REMOVE_DUPLICATES_PREFIX: "/remove_duplicates"i
                        | "/remove_dups"i
                        | "/delta"i

_SORT_PREFIX: "/sort"i
           | "/order"i
           | "/tau"i


// ~~~~~~~~ SET OPERATIONS ~~~~~~~~ //

set_ops: union
       | intersection
       | difference

union: table UNION_PREFIX table // ("," table)*
intersection: table INTERSECT_PREFIX table // ("," table)*
difference: table DIFFERENCE_PREFIX table // ("," table)*

UNION_PREFIX: "/union"i
            | "/u"i
            | "/union^d"i
            | "/u^d"i

INTERSECT_PREFIX: "/intersect"i
                   | "/inter"i
                   | "/intersect^d"i
                   | "/inter^d"i

DIFFERENCE_PREFIX: "/difference"i
                 | "/diff"i
                 | "/subtract"i
                 | "/difference^d"i
                 | "/diff^d"i
                 | "/subtract^d"i

// ~~~~~~~~ MERGE OPERATIONS ~~~~~~~~ //

merge_ops: cross
        | join
        | divide

cross: table _CROSS_PREFIX table
join: table JOIN_PREFIX ("{" (attributes | comp_cond) "}")? table
divide: table _DIVIDE_PREFIX table

_CROSS_PREFIX: "/cross_product"i
            | "/cross"i
            | "/x"i

JOIN_PREFIX: "/left_semi_join"i
           | "/left_semi_j"i
           | "/left_semi"i
           | "/semi_join"i
           | "/semi_j"i
           | "/semi"i
           | "/right_semi_join"i
           | "/right_semi_j"i
           | "/right_semi"i
           | "/inner_join"i
           | "/inner_j"i
           | "/inner"i
           | "/join"i
           | "/j"i
           | "/left_outer_join"i
           | "/left_outer_j"i
           | "/left_outer"i
           | "/left_join"i
           | "/left_j"i
           | "/left"i
           | "/right_outer_join"i
           | "/right_outer_j"i
           | "/right_outer"i
           | "/right_join"i
           | "/right_j"i
           | "/right"i
           | "/full_outer_join"i
           | "/full_outer_j"i
           | "/full_outer"i
           | "/full_join"i
           | "/full_j"i
           | "/full"i
           | "/outer_join"i
           | "/outer_j"i
           | "/outer"i



_DIVIDE_PREFIX: "/divide"i
              | "/div"i

// ~~~~~~~~ TABLES, ATTRIBUTES, & OTHER ~~~~~~~~ //

attributes: attr ("," attr)*
          | ALL_ATTR
sort_attributes: sort_attr ("," sort_attr)*
sort_attr: attr SORT_DIR

// TODO: clean error message for when math)cond doesn't have alias names
?attr: math_cond "->" CNAME
        | alias_attr
        | _table_attr

_table_attr: CNAME ("." CNAME)?
alias_attr: CNAME "->" CNAME

?math_cond: math_term MATH_OP math_term
        //   | math_cond MATH_OP math_term
          | "(" math_cond ")"
        //   | math_term
          // TODO: test to make sure ^ wont break if 2->col2?

?math_term: _table_attr
          | NUMBER
          | math_cond // ?

comp_cond: TRUTH_VAL 
         | _comp_term COMP_OP _comp_term
         | "(" comp_cond ")"
         | comp_cond (AND | OR) comp_cond

_comp_term: attr
          | NUMBER
          | STRING
          | math_cond


aggr_conds: aggr_term ("," aggr_term)*
aggr_term: aggr_func ("->" CNAME)?
aggr_func: AGGR_OP "(" attr ")"
         | COUNT_OP "(" attributes ")"

ALL_ATTR: "*"
MATH_OP: "+" | "-" | "*" | "/" | "%" | "^"
COMP_OP: ">" | "<" | ">=" | "<=" | "!=" | "==" | "="
AGGR_OP: "sum"i | "avg"i | "min"i | "max"i | "mean"i
COUNT_OP: "count"i
AND: "and"i | "&&" | "&" 
OR: "or"i | "||" | "|"
SORT_DIR: "asc"i | "desc"i
TRUTH_VAL: "true"i | "false"i | "t"i | "f"i
STRING: ESCAPED_STRING | "'" _STRING_ESC_INNER "'"

%import common.ESCAPED_STRING
%import common._STRING_ESC_INNER
%import common.CNAME
%import common.NUMBER
%import common.WS
%ignore WS
