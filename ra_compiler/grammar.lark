// ra_compiler/grammar.lark
// defines the grammar for the relational algebra compiler as described in grammar_syntax.md

start: db_ops | _expr | _expr "->" CNAME

_expr: table
    | unary_ops
    | set_ops
    | merge_ops

table: CNAME | "(" _expr ")"

// ~~~~~~~~ DATABASE OPERATIONS ~~~~~~~~ //

db_ops: list
      | drop

list: _LIST_PREFIX | "(" list ")"

drop: _DROP_PREFIX (CNAME | ALL) | "(" drop ")"

_LIST_PREFIX: /(\/)?list(?![a-z])/i
_DROP_PREFIX: /\/drop(?![a-z])/i

// ~~~~~~~~ UNARY OPERATIONS ~~~~~~~~ //

unary_ops: projection
         | selection
         | group
         | rename
         | remove_duplicates
         | sort

projection: PROJ_PREFIX "{" attributes "}" table
selection: _SEL_PREFIX "{" comp_cond "}" table
group: _GROUP_PREFIX "{" (attributes ";")? aggr_conds "}" table
remove_duplicates: _REMOVE_DUPLICATES_PREFIX table
sort: _SORT_PREFIX "{" sort_attributes "}" table  
rename: _RENAME_PREFIX "{" CNAME "}" _expr
        | _RENAME_PREFIX "(" CNAME "," _expr ")"

PROJ_PREFIX: /\/(projection|pi)(\^d)?(?![a-z])/i

_SEL_PREFIX: /\/(selection|select|sigma)(?![a-z])/

_GROUP_PREFIX: /\/(group_by|group|gamma)(?![a-z])/

_RENAME_PREFIX: /\/(rename|rho)(?![a-z])/

_REMOVE_DUPLICATES_PREFIX: /\/(remove_duplicates|remove_dups|delta)(?![a-z])/

_SORT_PREFIX: /\/(sort|order|tau)(?![a-z])/


// ~~~~~~~~ SET OPERATIONS ~~~~~~~~ //

set_ops: union
       | intersection
       | difference

union: table UNION_PREFIX table
intersection: table INTERSECT_PREFIX table
difference: table DIFFERENCE_PREFIX table

UNION_PREFIX: /\/(union|u)(\^d)?(?![a-z])/i

INTERSECT_PREFIX: /\/(intersect|inter)(\^d)?(?![a-z])/i

DIFFERENCE_PREFIX: /\/(difference|diff|subtract)(\^d)?(?![a-z])/i

// ~~~~~~~~ MERGE OPERATIONS ~~~~~~~~ //

merge_ops: cross
        | join
        | divide

cross: table _CROSS_PREFIX table
join: table JOIN_PREFIX ("{" (attributes | comp_cond) "}")? table
divide: table _DIVIDE_PREFIX table

_CROSS_PREFIX: /\/(cross_product|cross|x)(?![a-z])/

JOIN_PREFIX: /\/(
    left_semi_join
  | left_semi_j
  | left_semi
  | semi_join
  | semi_j
  | semi
  | right_semi_join
  | right_semi_j
  | right_semi
  | inner_join
  | inner_j
  | inner
  | join
  | j
  | left_outer_join
  | left_outer_j
  | left_outer
  | left_join
  | left_j
  | left
  | right_outer_join
  | right_outer_j
  | right_outer
  | right_join
  | right_j
  | right
  | full_outer_join
  | full_outer_j
  | full_outer
  | full_join
  | full_j
  | full
  | outer_join
  | outer_j
  | outer
)(?![a-z])/ix

_DIVIDE_PREFIX: /\/(divide|div)(?![a-z])/


// ~~~~~~~~ TABLES, ATTRIBUTES, & OTHER ~~~~~~~~ //

attributes: attr ("," attr)*
          | ALL_ATTR
sort_attributes: sort_attr ("," sort_attr)*
sort_attr: attr SORT_DIR

?attr: math_cond "->" CNAME
        | alias_attr
        | _table_attr

_table_attr: CNAME ("." CNAME)?
alias_attr: CNAME "->" CNAME

?math_cond: math_term MATH_OP math_term
          | "(" math_cond ")"

?math_term: _table_attr
          | NUMBER
          | math_cond

comp_cond: TRUTH_VAL 
         | _comp_term COMP_OP _comp_term
         | "(" comp_cond ")"
         | comp_cond (AND | OR) comp_cond

_comp_term: attr
          | NUMBER
          | STRING
          | math_cond


aggr_conds: aggr_term ("," aggr_term)*
aggr_term: aggr_func ("->" CNAME)?
aggr_func: AGGR_OP "(" DISTINCT? attr ")"
         | COUNT_OP "(" DISTINCT? attributes ")"

ALL_ATTR: "*"
MATH_OP: "+" | "-" | "*" | "/" | "%" | "^"
COMP_OP: ">" | "<" | ">=" | "<=" | "!=" | "==" | "="
AGGR_OP: "sum"i | "avg"i | "min"i | "max"i | "mean"i
COUNT_OP: "count"i
AND: "and"i | "&&" | "&" 
OR: "or"i | "||" | "|"
SORT_DIR: "asc"i | "desc"i
TRUTH_VAL: "true"i | "false"i | "t"i | "f"i
STRING: ESCAPED_STRING | "'" _STRING_ESC_INNER "'"
DISTINCT: "distinct"i | "^d"i
ALL: "-all"i
RENAME_ARROW: "->"

%import common.ESCAPED_STRING
%import common._STRING_ESC_INNER
%import common.CNAME
%import common.NUMBER
%import common.WS
%ignore WS
